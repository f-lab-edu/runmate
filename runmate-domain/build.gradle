bootJar { enabled = false }
jar { enabled = true }

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.10.3'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation 'org.flywaydb:flyway-core'
    implementation group: 'org.json', name: 'json', version: '20160810'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    compile("com.querydsl:querydsl-core") // querydsl
    compile("com.querydsl:querydsl-jpa") // querydsl
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def generated='src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}

test {
    useJUnitPlatform()
}
flyway {
    url = 'jdbc:mysql://localhost:3306/runmate?serverTimezone=Asia/Seoul&characterEncoding=utf8'
    user = 'root'
    password = '3504httdA*'
    schemas = ['runmate']
    placeholders = [
            'keyABC': 'valueXYZ',
            'otherplaceholder': 'value123'
    ]
    encoding = 'UTF8'
    table = 'flyway_migration_history'
    driver = "com.mysql.cj.jdbc.Driver"
}